//
//  WeatherDataDisplayInteractor.swift
//  WeatherApp
//
//  Created by Kinjal Solanki on 22/03/19.
//  Copyright (c) 2019 Kinjal Solanki. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com


import UIKit
import Networking

protocol WeatherDataDisplayInteractorProtocol {
    func getWeatherData(urlString : String)
}

protocol WeatherDataDisplayDataStore {
    //var name: String { get set }
}

class WeatherDataDisplayInteractor: WeatherDataDisplayInteractorProtocol, WeatherDataDisplayDataStore {
    var presenter: WeatherDataDisplayPresentationProtocol?
    var arrDict = [ResponseModel]()
    //var name: String = ""
    
    
    // MARK: Get weather data
    func getWeatherData(urlString : String) {
        
        //BaseUrl : "https://s3.eu-west-2.amazonaws.com/interview-question-data/metoffice"
        let networking = Networking(baseURL: "https://s3.eu-west-2.amazonaws.com/interview-question-data/metoffice")
        networking.get(urlString) { result in
            switch result {
            case .success(let response):
                let json = response.arrayBody
                print(json)
                do {
                    let json = try JSONSerialization.data(withJSONObject: json)
                    let decoder = JSONDecoder()
                    decoder.keyDecodingStrategy = .convertFromSnakeCase
                    let decodedValues = try decoder.decode([ResponseModel].self, from: json)
                    self.arrDict = decodedValues as! [ResponseModel]
                    print(decodedValues)
                } catch {
                    print(error)
                }
                print(self.arrDict)
                self.presenter?.getWeatherReponse(mdlResponse: self.arrDict)

            case .failure( _):
                break
                // Handle error
            }
        }
        
    }
}
