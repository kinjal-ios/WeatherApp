//
//  WeatherDataDisplayInteractor.swift
//  WeatherApp
//
//  Created by Kinjal Solanki on 22/03/19.
//  Copyright (c) 2019 Kinjal Solanki. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com


import UIKit
import Networking
import IHProgressHUD

protocol WeatherDataDisplayInteractorProtocol {
    func getWeatherData(urlString : String)
}

class WeatherDataDisplayInteractor: WeatherDataDisplayInteractorProtocol {
    var presenter: WeatherDataDisplayPresentationProtocol?
    private var arrData = [ResponseModel]()
    private var arrWeatherCat = [WeatherCategory]()
        
    // MARK: Get weather data
    
    func getWeatherData(urlString: String) {
    
        let networking = Networking(baseURL: BASEURL)
        networking.get(urlString) { result in
            switch result {
                case .success(let response):
                    let json = response.arrayBody
                    print(json)
                    do {
                        let json = try JSONSerialization.data(withJSONObject: json)
                        let decoder = JSONDecoder()
                        decoder.keyDecodingStrategy = .convertFromSnakeCase
                        
                        let decodedValues = try decoder.decode([ResponseModel].self, from: json)
                        self.arrData = decodedValues
                        
                        if urlString == WeatherCategory.minimumtemp_Wales.rawValue {
                            IHProgressHUD.dismiss()
                            UserDefaults.standard.set(true, forKey: "isDataInsered")
                        }
                        
                        let (countryId,type) = getCountryDetails(countryInfo: urlString)
                        if DBManager.shared.openDatabase(){
                            for dict in self.arrData{
                                let insertQry = "insert into Weather_data (country_id, value,month,year,type) values (\(countryId),\(dict.value!),\(dict.month!),\(dict.year!),\(type))"
                                let _ = DBManager.shared.executeStatement(query: insertQry)
                            }
                        }
                        UserDefaults.standard.set(true, forKey: urlString)
                        
                    } catch {
                        print(error)
                    }
                    print(self.arrData)
                    self.presenter?.getWeatherReponse(mdlResponse: self.arrData)

                case .failure( _):
                    break
                    // Handle error
                }
        }
    }
}
