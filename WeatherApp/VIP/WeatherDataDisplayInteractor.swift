//
//  WeatherDataDisplayInteractor.swift
//  WeatherApp
//
//  Created by Kinjal Solanki on 22/03/19.
//  Copyright (c) 2019 Kinjal Solanki. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com


import UIKit
import Networking
import IHProgressHUD

protocol WeatherDataDisplayInteractorProtocol {
    func getWeatherData(urlString : String)
    func initiateApiCalls()

}

class WeatherDataDisplayInteractor: WeatherDataDisplayInteractorProtocol {
   
    var presenter: WeatherDataDisplayPresentationProtocol?
    private var arrData = [ResponseModel]()
    private var arrWeatherCat = [WeatherCategory]()

    //Initiate Api calls
    func initiateApiCalls() {
        self.arrWeatherCat = WeatherCategory.allValues
        let queue = OperationQueue.main
        
        for i in 0..<arrWeatherCat.count {
            let operationWeather = BlockOperation()
            operationWeather.addExecutionBlock {
                if !UserDefaults.standard.bool(forKey: self.arrWeatherCat[i].rawValue) {
                    self.presenter?.callWeatherApi(urlString: self.arrWeatherCat[i].rawValue)
                }
            }
            if queue.operationCount > 0 {
                operationWeather.addDependency(queue.operations.last!)
            }
            queue.addOperation(operationWeather)
        }
    }
    
    // MARK: Get weather data
    func getWeatherData(urlString: String) {
        let networking = Networking(baseURL: BASEURL)
        networking.get(urlString) { result in
            switch result {
                case .success(let response):
                    let json = response.arrayBody
                    
                    do {
                        let json = try JSONSerialization.data(withJSONObject: json)
                        let decoder = JSONDecoder()
                        decoder.keyDecodingStrategy = .convertFromSnakeCase
                        
                        let decodedValues = try decoder.decode([ResponseModel].self, from: json)
                        self.arrData = decodedValues
                        self.insertIntoDB(urlString: urlString)
                        
                    } catch {
                        print(error)
                    }
                    
                    self.presenter?.getWeatherReponse(mdlResponse: self.arrData)

                case .failure( _):
                    break
                    // Handle error
                }
        }
    }
    
    //Perform DB insertion
    func insertIntoDB(urlString : String) {
        if urlString == WeatherCategory.minimumtemp_Wales.rawValue {
            IHProgressHUD.dismiss()
            UserDefaults.standard.set(true, forKey: "isDataInsered")
        }
        let (countryId,type) = getCountryDetails(countryInfo: urlString)
        DBManager.shared.insertDataIntoDB(arrReponse: self.arrData, countryId: countryId, type: type)
        UserDefaults.standard.set(true, forKey: urlString)
    }
    
}
