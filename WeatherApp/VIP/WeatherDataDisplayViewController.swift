//
//  WeatherDataDisplayViewController.swift
//  WeatherApp
//
//  Created by Kinjal Solanki on 22/03/19.
//  Copyright (c) 2019 Kinjal Solanki. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com

import UIKit
import IHProgressHUD
import Reachability
import SwiftyGif

let BOTTOM_CONST: CGFloat = 250
let ROW_HEIGHT: CGFloat = 50

protocol WeatherDataDisplayProtocol: class {
    func displayAlert(strTitle : String, strMessage : String)
    func displayResponse(mdlResponse : [ResponseModel])
}

class WeatherDataDisplayViewController: UIViewController, WeatherDataDisplayProtocol {
    
    //IBOutlets
    @IBOutlet weak var tblHeightConstant: NSLayoutConstraint!
    @IBOutlet weak var tblWeatherData: UITableView!
    @IBOutlet weak var tblHeader: UIView!
    @IBOutlet weak var btnDone: UIButton!
    @IBOutlet weak var pickerViewContainerVw: UIView!
    @IBOutlet weak var pickerView: UIPickerView!
    @IBOutlet weak var pickerBottomConstant: NSLayoutConstraint!
    @IBOutlet weak var lblPickerTitle: UILabel!
    @IBOutlet weak var lblTemprature: UILabel!
    @IBOutlet weak var lblCountry: UILabel!
    @IBOutlet weak var lblYearSelected: UILabel!
    @IBOutlet weak var imgVwCenter: UIImageView!
    
    //variables
    private var isLocationSelected : Bool = false
    private var pickerData: [String] = [String]()
    private var isSuccess = Bool()
    private var arrCountries = [String]()
    private var arrYears = [String]()
    private var mdlResponse = [ResponseModel]()
    private var arrWeatherCat = [WeatherCategory]()
    private var arrWeatherData = [WeatherDataModel]()
    private var arrWeatherMetricMdl = [MetricDataModel]()
    private var countryId = Int()
    private var yearSelected = Int()
    private let reachability = Reachability()!
    
    var presenter : WeatherDataDisplayPresentationProtocol?

    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = WeatherDataDisplayInteractor()
        let presenter = WeatherDataDisplayPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.tblHeader.setCornerRadius(radius: self.tblHeader.frame.height / 2.0)
        self.tblHeader.dropShadow(
            offset: CGSize(width: 1, height: 1),
            radius: 25,
            color: UIColor.black,
            opacity: 0.3
        )
        let gif = UIImage(gifName: "weather.gif")
        self.imgVwCenter.setGifImage(gif)
        self.checkInternetConnection()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.tblHeightConstant.constant = CGFloat(CGFloat(self.arrWeatherMetricMdl.count) * ROW_HEIGHT)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(true)
        reachability.stopNotifier()
        NotificationCenter.default.removeObserver(self, name: .reachabilityChanged, object: reachability)
    }
    
    //MARK: UI Setup methods
    func setApicall() {
        IHProgressHUD.show()
        self.presenter?.initiateApiCalls()
    }
    
    func setupUI() {
        self.filterYearsDetails()
        self.countryId = 1
        self.yearSelected = Int(self.arrYears[0])!
        self.reloadData()
        self.getCountries()
    }
    
    //UI reload when data changes
    func reloadData() {
        (isSuccess,arrWeatherMetricMdl) = DBManager.shared.getWeatherDataMetric(
            countryId: self.countryId,
            year: self.yearSelected
        )
        self.tblWeatherData.reloadData()
        self.viewDidLayoutSubviews()
        self.lblYearSelected.text = "Year-\(self.yearSelected)"
        self.lblCountry.text = DBManager.shared.getCountryWithId(id: self.countryId)
    }
    
    //Get countries from database
    func getCountries() {
        (isSuccess,arrCountries) = DBManager.shared.getCountryDetail()
    }
    
    //Open or dismiss picker
    func openOrDismissPicker(isOpen: Bool) {
        if isLocationSelected {
            self.lblPickerTitle.text = LOCATION_TITLE
            pickerData = self.arrCountries
        } else {
            self.lblPickerTitle.text = YEAR_TITLE
            pickerData = self.arrYears
        }
        self.pickerView.reloadAllComponents()
        
        UIView.animate(withDuration: 0.5) {
            if isOpen{
                self.pickerBottomConstant.constant = 0.0
            } else {
                self.pickerBottomConstant.constant = BOTTOM_CONST
            }
            self.view.layoutIfNeeded()
        }
    }
    
    //Filtering years from response
    func filterYearsDetails() {
        var arrYearsDetail = [Int]()
        (self.isSuccess,arrYearsDetail) = DBManager.shared.getYearsDetail()
        arrYearsDetail = arrYearsDetail.removeDuplicates()
        self.arrYears = arrYearsDetail.map { String($0) }.reversed()
        pickerData = self.arrYears
    }
    
    //MARK:- Check for the internet connection
    func checkInternetConnection(){
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(reachabilityChanged(note:)),
            name: .reachabilityChanged,
            object: reachability
        )
        do {
            try reachability.startNotifier()
        } catch {
            print("could not start reachability notifier")
        }
    }
    
    @objc func reachabilityChanged(note: Notification) {
        let reachability = note.object as! Reachability
        
        switch reachability.connection {
        case .wifi, .cellular:
            !UserDefaults.standard.bool(forKey: "isDataInsered") ?
                self.setApicall() : self.setupUI()
        case .none:
            self.setupUI()
            self.showAlert(withTitle: "Network Error", withMessage: "No Internet Connection.")
            print("Network not reachable")
        }
    }
    
    //MARK: - Delegate methods
    func displayAlert(strTitle : String, strMessage : String) {}
    
    func displayResponse(mdlResponse: [ResponseModel]) {
        self.mdlResponse = mdlResponse
        self.setupUI()
    }
    
    //MARK: - UIButton Methods
    @IBAction func btnLocationTapped(_ sender: UIButton) {
        self.isLocationSelected = true
        self.openOrDismissPicker(isOpen: true)
    }
    
    @IBAction func btnCalenderTapped(_ sender: UIButton) {
        self.isLocationSelected = false
        self.openOrDismissPicker(isOpen: true)
    }
    
    @IBAction func btnDoneTapped(_ sender: UIButton) {
        self.openOrDismissPicker(isOpen: false)
        self.reloadData()
    }
}

extension WeatherDataDisplayViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return arrWeatherMetricMdl.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell : WeatherCell = tableView.dequeueReusableCell(withIdentifier: WEATHERCELL, for: indexPath) as! WeatherCell
        cell.mdlMetrics = self.arrWeatherMetricMdl[indexPath.row]
        cell.selectionStyle = .none
        
        return cell
    }
    
}

extension WeatherDataDisplayViewController: UIPickerViewDataSource {
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
       return pickerData.count
    }
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }

}

extension WeatherDataDisplayViewController: UIPickerViewDelegate {
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
         return pickerData[row]
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        if self.isLocationSelected {
            self.countryId = DBManager.shared.getCountryId(name: pickerData[row])
        } else {
            self.yearSelected = Int(pickerData[row])!
        }
    }
    
}

extension Array where Element:Equatable {
    
    func removeDuplicates() -> [Element] {
        var result = [Element]()
        for value in self {
            if !result.contains(value) {
                result.append(value)
            }
        }
        
        return result
    }
    
}
